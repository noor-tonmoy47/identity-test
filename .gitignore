# This .gitignore file is for a .NET solution containing one or more projects, including Web APIs.

# Visual Studio / Windows specific files
.vs/
*.suo
*.user
*.userprefs
*.log
*.ncb
*.resource
*.aps
*.bak
*.com
*.dll
*.exe
*.obj
*.pdb
*.lib
*.so
*.a
*.ilk
*.ipch
*.pch
*.idb
*.opt
*.msi
*.sbr
*.bsc
*.res
*.pch

# Rider specific files
.idea/
_ReSharper.*/
*.csproj.DotSettings
*.DotSettings.user

# Binaries and Object files
[Bb]in/
[Oo]bj/

# NuGet packages
# Packages directory
[Pp]ackages/
# *.nupkg files from the root of the project
*.nupkg
# NuGet Cache files
.nuget/packages/
.nuget/NuGetScratch/
.nuget/*.cache
# NuGet metadata files (generated by MSBuild)
*.nuget.g.props
*.nuget.g.targets

# ASP.NET Core
# User secrets (sensitive configuration)
appsettings.Development.json
# Or if you use a specific user secrets folder:
.secrets/

# Test results
TestResults/
*.trx
*.coverage
*.coveragexml
*.runsettings

# SQL Server files
*.mdf
*.ldf
*.sdf
*.db

# Temporary files
*.~
*.tmp
*.bak
*.scc
*.vspscc
*.vssscc

# Other common ignored files
Thumbs.db
Desktop.ini

# Git specific
.gitattributes

# Editor-specific files
# VS Code
.vscode/
# Sublime Text
*.sublime-project
*.sublime-workspace
# Atom
.atom/

# Npm / Node.js (if your Web API projects include client-side build steps)
node_modules/
npm-debug.log
yarn-error.log
.yarn/
package-lock.json # Can be committed if you want exact dependency versions, but often ignored for backend APIs

# Static web assets (often published, not directly committed in source)
wwwroot/css/*.map
wwwroot/js/*.map

# Kestrel/IIS Express auto-generated certificates
*.pfx

# Docker
.dockerignore
Dockerfile.debug

# Publishing/Deployment output
Publish/
deploy/

# Visual Studio Code extension (if used)
.vscode/launch.json
.vscode/tasks.json
.vscode/settings.json

# Markdown docs
*.md

# XML Documentation (generated files)
*.xml # Be careful with this, as actual XML config files (like Web.config if still used) would be ignored. Better to be specific if you have other XMLs.
# A more specific approach for generated XML docs:
# **/*.xml # This would ignore ALL xml files recursively.
# A better approach is often to commit XML config files and explicitly ignore generated ones.
# Example for generated XML documentation:
# MyProject.xml

# Example of ignoring specific auto-generated XML documentation
# If your project outputs 'MyApiProjectA.xml' and 'MyApiProjectB.xml'
# MyApiProjectA.xml
# MyApiProjectB.xml
